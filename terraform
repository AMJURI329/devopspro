 TERRAFORM



  
mkdir project
    2  cd project
    3  vim server.tf
    4  terraform init
    5  cd
    6  sudo dnf install -y dnf-plugins-core
    7  sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    8  sudo dnf -y install terraform
    9  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
   10  unzip awscliv2.zip
   11  sudo ./aws/install
   12  terraform --version
   13  cd project
   14  ll
   15  terraform init
   16  vim server.tf
   17  terraform fmt
   18  terraform validate
   19  terraform plan
   20  terraform apply
----------------------------------------------------------------------------------------------=----------------------------------------------------------------------------
 this is for adding the inbound and outbound rules
 vim server.tf
 provider "aws" {
  region     = "us-east-1"
  access_key = ""
  secret_key = ""
}
 resource "aws_instance" "web-server" {
  ami                    = "ami-05ffe3c48a9991133"
  instance_type          = "t2.micro"
  key_name               = "lti-mahape-key"
  availability_zone      = "us-east-1a"
  security_groups = ["${aws_security_group.web-access.name}"]
  tags = {
    Name = "hello"
  }
}

resource "aws_security_group" "web-access" {
  name        = "web-access"
  description = "Allow access"
  tags = {
    Name = "web-access"
  }
}

resource "aws_vpc_security_group_ingress_rule" "allow_http" {
  security_group_id = aws_security_group.web-access.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}
resource "aws_vpc_security_group_ingress_rule" "allow_ssh" {
  security_group_id = aws_security_group.web-access.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}
resource "aws_vpc_security_group_ingress_rule" "allow_443" {
  security_group_id = aws_security_group.web-access.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 443
  ip_protocol       = "tcp"
  to_port           = 443
}
resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
  security_group_id = aws_security_group.web-access.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


This is related to the attaching the volume to the instance

 provider "aws" {
  region     = "us-east-1"
  access_key = ""
  secret_key = ""
}
resource "aws_security_group" "web-access3" {
  name        = "web-access3"
  description = "Allow access"
  tags = {
    Name = "web-access3"
  }
}

resource "aws_vpc_security_group_ingress_rule" "allow_http1" {
  security_group_id = aws_security_group.web-access3.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}
resource "aws_instance" "creating_vol" {
  ami               = "ami-05ffe3c48a9991133"
  availability_zone = "us-east-1a"
  instance_type     = "t2.micro"
  security_groups   = ["${aws_security_group.web-access3.name}"]
  key_name          = "lti-mahape-key"
  #root disk
  root_block_device {
    volume_size           = "25"
    volume_type           = "gp2"
    delete_on_termination = true
  }
 
  #additional data disk
  ebs_block_device {
    device_name           = "/dev/xvdb"
    volume_size           = "10"
    volume_type           = "gp2"
    delete_on_termination = true
  }

  user_data = <<-EOF
        #!/bin/bash
        sudo yum install httpd -y
        sudo systemctl start httpd
        sudo systemctl enable httpd
        echo "<h1>sample webserver using terraform</h1>" | sudo tee /var/www/html/index.html
  EOF

  tags = {
    Name     = "hello-India"
    Stage    = "testing"
    Location = "India"
  }

}

vim lti-mahape-key.pem  -  paste the key of the lti-mahape-key.pem
chmod 400 lti-mahape-key.pem
   paste the connect ssh to connect the new instance 
   sudo su -
   lsblk
   mkfs.ext4 /dev/xvdb
   mkdir /data
   mount /dev/xvdb /data
   cd /data
   touch sri.txt{1..5}
   ll






   resource "aws_security_group" "web_access23" {
  name        = "web_access23"
  description = "Allow traffic"
 
  tags = {
    Name = "web_access23"
  }
}
 
resource "aws_vpc_security_group_ingress_rule" "allow_http" {
  security_group_id = aws_security_group.web_access23.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}
 
resource "aws_vpc_security_group_ingress_rule" "allow_ssh" {
  security_group_id = aws_security_group.web_access23.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}
 
resource "aws_vpc_security_group_ingress_rule" "allow_https" {
  security_group_id = aws_security_group.web_access23.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 443
  ip_protocol       = "tcp"
  to_port           = 443
}
resource "aws_vpc_security_group_egress_rule" "allow_all_taraffic" {
  security_group_id = aws_security_group.web_access23.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}
 
#ec2 instance code starts here
resource "aws_instance" "custom-server" {
  ami               = "ami-05ffe3c48a9991133"
  availability_zone = "us-east-1a"
  instance_type     = "t2.micro"
  security_groups   = ["${aws_security_group.web_access23.name}"]
  key_name          = "Milestone-key"
 
 
  user_data = <<-EOF
        #!/bin/bash
        sudo yum install httpd -y
        sudo systemctl start httpd
        sudo systemctl enable httpd
        echo "<h1>custom  webserver using terraform</h1>" | sudo tee /var/www/html/index.html
  EOF
  tags = {
    Name     = "hello-India"
    Stage    = "testing"
    Location = "India"
  }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   


for using the key paie that is created for security 
   provider "aws" {
  region     = "us-east-1"
  access_key = ""
  secret_key = ""
}

resource "aws_instance" "creating_vol" {
  ami               = "ami-05ffe3c48a9991133"
  availability_zone = "us-east-1a"
  instance_type     = "t2.micro"

  key_name = "deployer-key"
  #root disk
  root_block_device {
    volume_size           = "25"
    volume_type           = "gp2"
    delete_on_termination = true
  }

  #additional data disk
  ebs_block_device {
    device_name           = "/dev/xvdb"
    volume_size           = "10"
    volume_type           = "gp2"
    delete_on_termination = true
  }
   
  user_data = <<-EOF
        #!/bin/bash
        sudo yum install httpd -y
        sudo systemctl start httpd
        sudo systemctl enable httpd
        echo "<h1>sample webserver using terraform</h1>" | sudo tee /var/www/html/index.html
  EOF

  tags = {
    Name     = "hello-India"
    Stage    = "testing"
    Location = "India"
  }

}

resource "aws_key_pair" "deployer" {
  key_name   = "deployer-key"
  public_key = ""
}   



for using existing security group 
 provider "aws" {
  region     = "us-east-1"
  access_key = ""
  secret_key = ""
}
resource "aws_instance" "creating_vol" {
  ami                    = "ami-05ffe3c48a9991133"
  availability_zone      = "us-east-1a"
  instance_type          = "t2.micro"
  vpc_security_group_ids = [data.aws_security_group.previous-sg.id]
  key_name               = "lti-mahape-key"
  tags = {
    Name     = "existing_sg_inst"
    Stage    = "testing"
    Location = "India"
  }
}

data "aws_security_group" "previous-sg" {
  id = "sg-0bf9399b22dafa7fc" #existing security group id
}




this is for provisioning automatically
   provider "aws" {
  region     = "us-east-1"
  access_key = ""
  secret_key = ""
}

data "aws_security_group" "previous-sg" {
  id = "sg-0bf9399b22dafa7fc" #existing security group id
}
data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"              #Terraform to only look for AMIs that use HVM (Hardware Virtual Machine) virtualization.
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical             #This restricts the search to AMIs owned by a specific AWS account.
}

resource "aws_instance" "web" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = "t2.micro"
  availability_zone      = "us-east-1a"
  key_name               = "lti-mahape-key"
  vpc_security_group_ids = [data.aws_security_group.previous-sg.id]
  tags = {
    Name = "HelloWorld"
  }
}

   
 
mkdir project
    2  cd project
    3  vim server.tf
    4  terraform init
    5  cd
    6  sudo dnf install -y dnf-plugins-core
    7  sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    8  sudo dnf -y install terraform
    9  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
   10  unzip awscliv2.zip
   11  sudo ./aws/install
   12  terraform --version
   13  cd project
   14  ll
   15  terraform init
   16  vim server.tf
   17  terraform fmt
   18  terraform validate
   19  terraform plan
   20  terraform apply
 21

   ###Create AWS AMI from AWS INStance
resource "aws_ami_from_instance" "my-images" {
  name               = "terra-image"
  source_instance_id = "i-08378f82f606e2542"

tags = {
    Name = "Hello-world"
  }
   }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   for vpc creation 
 provider "aws" {
  region     = "us-east-1"
  access_key = ""
  secret_key = ""
}

resource "aws_vpc" "test-vpc" {
  cidr_block = "10.0.0.0/16"
}
resource "aws_subnet" "public-subnet" {
  vpc_id            = aws_vpc.test-vpc.id
  availability_zone = "us-east-1a"
  cidr_block        = "10.0.0.0/24"

  tags = {
    Name = "Public-subnet"
  }
}
resource "aws_subnet" "private-subnet" {
  vpc_id            = aws_vpc.test-vpc.id
  availability_zone = "us-east-1b"
  cidr_block        = "10.0.1.0/24"

  tags = {
    Name = "Private-subnet" #security group
  }
}
resource "aws_security_group" "test_access" {
  name        = "test_access"
  vpc_id      = aws_vpc.test-vpc.id
  description = "allow ssh and http"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }


}
resource "aws_internet_gateway" "test-igw" {
  vpc_id = aws_vpc.test-vpc.id

  tags = {
    Name = "test-igw"
  }
}

resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.test-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.test-igw.id
  }


  tags = {
    Name = "public-rt"

  }
}
resource "aws_route_table_association" "public-asso" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}
resource "aws_instance" "sri-server" {
  ami             = "ami-05ffe3c48a9991133"
  subnet_id       = aws_subnet.public-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "ltimindtree"
  tags = {
    Name     = "test-World"
    Stage    = "testing"
    Location = "chennai"
  }

}
resource "aws_eip" "sri-ec2-eip" {
  instance = aws_instance.sri-server.id
}
resource "aws_key_pair" "ltimindtree" {
  key_name   = "ltimindtree"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDsiVHsGsczvFyiEezuKaVb60WPaWJ7l+9HiE6qMOAVY0qftZZx8CRRtnwPsHt6bSBTTfM5P5e4nKZF7AWG+qU2Mr1zjVOlHJHSJOi9StJrqEOwZMj/xkzZ1KDuFahpFHYTDYUR/kjPiZfOEyrsuaCVB6KwyidnseJjG/GJwrLOCSro2/dEfGWPS8k/b/UAUiarGpavD+kWqCQfNOfrfAiLkQztaUZiT7uHUQ9TmmEUXqNliP0B7pnXEHodi/E3xn91/3nWVVvklyCYfpx7r2XEteEq7imGrP5U9Y4G5VB7o/L9ZDcjXDuoCkEtnMGOuXwJgp5n3PaIippiM7sPWl79q4GcRVg+7j+aET1J5Edda6e99g9ukjLcQts7+rESQEyzp28T6opcmF5wvvhLP0r1DwwFCv6LXX1K3QDrmYr48M+gWIeCi7MWePZfeP5u+jFjGTKoHvgQrt0Rpm+VixgYM91WTqiWjklFs7ArVGczR5+XZcCz1/6AeszPzF7Cwr8= root@ip-172-31-40-165.ec2.internal"
}
resource "aws_instance" "database-server" {
  ami             = "ami-05ffe3c48a9991133"
  subnet_id       = aws_subnet.private-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "ltimindtree"
  tags = {
    Name     = "db-World"
    Stage    = "stage-base"
    Location = "delhi"
  }

}
resource "aws_eip" "nat-eip" {
  tags = {
    Name = "nat-eip"
  }
}
resource "aws_nat_gateway" "my-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.public-subnet.id
}

resource "aws_route_table" "private-rt" {
  vpc_id = aws_vpc.test-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.my-ngw.id
  }


  tags = {
    Name = "private-rt"
  }
}
resource "aws_route_table_association" "private-asso" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private-rt.id
}





    using variables

   provider "aws" {
  region     = "us-east-1"
  access_key = ""
  secret_key = ""
}
variable "vpc_cidr" {
  default     = "10.1.0.0/16"
  description = "cidr for our custom vpc"
}

variable "subnet_cidr" {
  default     = "10.1.1.0/24"
  description = "cidr for subnet"
}

variable "availability_zone" {
  default     = "us-east-1a"
  description = "AZ for subnet"
}

variable "instance_ami" {
  default     = "ami-05ffe3c48a9991133"
  description = "default ami for instances"
}

variable "instance_type" {
  default     = "t2.micro"
  description = "instance type for ec2"
}
   variable "env_tag" {
  default     = "production"
  description = "environment tag"
}


# code - creating vpc

resource "aws_vpc" "vpcone" {
  cidr_block = var.vpc_cidr
  tags = {
    Name = "${var.env_tag}"
  }
}

# code - creating IG and attaching it to VPC

resource "aws_internet_gateway" "vpcone-ig" {
  vpc_id = aws_vpc.vpcone.id
  tags = {
    Name = "${var.env_tag}"
  }
}
resource "aws_subnet" "subnet_public" {
  vpc_id                  = aws_vpc.vpcone.id
  cidr_block              = var.subnet_cidr
  map_public_ip_on_launch = "true"
  availability_zone       = var.availability_zone
  tags = {
    Name = "${var.env_tag}"
  }

}

# code - modifying route

resource "aws_route_table" "rtb_public" {
  vpc_id = aws_vpc.vpcone.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.vpcone-ig.id
  }
  tags = {
    Name = "${var.env_tag}"
  }
}
resource "aws_route_table_association" "rta_subnet_public" {
  subnet_id      = aws_subnet.subnet_public.id
  route_table_id = aws_route_table.rtb_public.id
}
resource "aws_security_group" "sg_newvpc" {
  name   = "newvpc"
  vpc_id = aws_vpc.vpcone.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.env_tag}"
  }

}
   
resource "aws_instance" "test" {
  ami                    = var.instance_ami
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.subnet_public.id
  vpc_security_group_ids = ["${aws_security_group.sg_newvpc.id}"]
  tags = {
    Name = "${var.env_tag}"
  }
}

#########################################################################################################################################
##########################################################################################################################
